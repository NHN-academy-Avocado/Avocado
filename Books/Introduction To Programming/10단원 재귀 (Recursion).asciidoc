== 10단원: 재귀 (Recursion)

=== 요약

* 귀납적으로 정의된 도메인
* 재귀 및 재귀 방법
* 런타임 메모리 관리
* 다중 재귀

=== 귀납적으로 정의된 도메인 (*Inductively defined domains)*

프로그램에 의해 조작되는 데이터는 _귀납적으로 정의된 도메인_ 에 속하는 경우가 많습니다 . 이 유형의 도메인은 요소 집합이 다음과 같이 특성화될 수 있다는 속성을 갖습니다.

* 하나 이상의 요소(유한 수)가 도메인에 속합니다.
* 하나 이상의 규칙을 통해 도메인의 하나 이상의 요소에서 도메인의 새로운 요소를 얻을 수 있습니다.

_도메인의 요소 집합이 위에 지정된 대로 특성화_ 된다는 사실은 명시적으로 언급된 요소와 규칙에 의해 지정된 요소 외에는 다른 요소가 도메인에 속하지 않음을 의미합니다.

_예:_ 자연수:

* 0은 자연수이다.
* _n의_
+
이 자연수이면 n
+
후속자는 자연수입니다.
* 다른 어떤 것도 자연수가 아니다.

_예:_ 문자열:

* 빈 문자열은 `""`
+
문자열입니다.
* _s가의_
+
문자열이면 s
+
첫 번째 위치에 있는 문자를 추가하여 문자열을 얻습니다.
* 다른 것은 문자열이 아닙니다.

_예:_ 텍스트 파일:

* 빈 파일은 텍스트 파일입니다.
* _ff_
+
가 텍스트 파일 이면
+
의 시작 부분에 새 줄을 배치하여 텍스트 파일을 얻습니다.
* 텍스트 파일이면 아무것도 없습니다.

컴퓨터 과학에서 일반적으로 사용되는 귀납적으로 정의된 다른 도메인으로는 _목록_ 과 _트리가_ 있습니다 .

=== 귀납적으로 정의된 도메인과 재귀

귀납적으로 정의된 영역의 요소는 *재귀를* 통해 쉽게 조작될 수 있습니다 .

메서드 자체의 활성화(직접적으로 또는 다른 메서드의 활성화를 통해 간접적으로)가 포함된 경우 메서드__가 재귀적이__ 라고 합니다 .

귀납적으로 정의된 자연수에 대한 수학적 함수의 몇 가지 예를 살펴보고, 이러한 함수가 귀납적으로 정의된 영역의 요소에서 작동한다는 사실을 활용해 보겠습니다.

_예:_ 계승:

image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img1.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img1.png]

fact(_n_) =

함수의 재귀적 정의는 함수가 작동하는 영역의 귀납적 정의 구조를 반영합니다. 따라서 우리는:

* 함수의 결과가 직접 결정될 수 있는 하나 이상의 _기본 사례 ;_
* 하나 이상의 _재귀 사례_
+
. 결과 계산이 도메인의 더 작고 간단한 값에 대한 동일한 함수의 계산으로 축소됩니다.

함수가 작동하는 영역이 귀납적으로 정의된다는 사실은 재귀 사례를 반복적으로 적용함으로써 유한한 수의 단계를 거쳐 기본 사례 중 하나에 도달할 것임을 보장합니다.

함수의 재귀적 정의부터 시작하여 일반적으로 재귀적 방법을 통해 비교적 쉽게 구현을 제공할 수 있습니다.

_예:_ 재귀적 방법을 통한 계승 구현:

[source,java]
----
public static long factorial(long n) {
  if (n == 0)
    return 1;
  else
    return n * factorial(n-1);
}
----

*Example: recursive implementation of the sum between two integers*

우리는 음수가 아닌 두 정수 사이의 합에 대해 다음과 같은 재귀적 정의를 활용합니다.

sum(_x_,_y_) =

image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img2.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img2.png]

Implementation:

[source,java]
----
public static int sum(int x, int y) {
  if (y == 0)
    return x;
  else
    return 1 + sum(x, y-1);
}
----

*Example:두 정수 사이의 거듭제곱의 재귀적 구현*

우리는 음수가 아닌 두 정수 사이의 거듭제곱에 대한 다음과 같은 재귀적 정의를 활용합니다.

_power_(_b,e_) =

image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img4.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img4.png]

Implementation( product 메소드 가 동일한 클래스에 정의되어 있다고 가정 ):

[source,java]
----
public static int power(int b, int e) {
  if (e == 0)
    return 1;
  else
    return (product(b, power(b, e-1)));
}
----

'''''

=== 재귀와 반복의 비교

재귀를 사용하여 구현된 일부 메서드는 반복을 사용하여 직접 구현할 수도 있습니다.

_예:_ 다음 반복 정의를 활용하는 계승의 반복 구현:

_fact_(_n_) = _n_ . (_n_ - 1) . (_n_ - 2) .   …   . 2 . 1

____
public static long factorialIterative(long n) \{ int res = 1; while (n > 0) \{ res = res * n; n–; } return res; }
____

반복 구현의 특징:

* 초기화:
+
Ex. res = 1;
* 루프 동작, 루프 반복 횟수만큼 실행:
+
예.res = res * n;
* 종료:
+
예.n–; allows the condition (n > 0)
+
이 거짓이 되도록 허용합니다.

이전에 표시된 재귀 정의를 활용하여 계승의 재귀 구현:

[source,java]
----
public static long factorial(long n) {
  if (n == 0)
    return 1;
  else
    return n * factorial(n-1);
}
----

재귀 구현의 특징:

* 기본 단계:
+
Ex.return 1;
* 재귀 단계:
+
• Ex. return n * factorial(n-1) ;
* 재귀 호출인 factorial(n-1)이 매개 변수로 전달된 값을 1씩 감소시킨다는 사실로 인해 종료가 보장됩니다 .
+
따라서 처음에 n>0 이 있으면 n==0 조건이 true인 활성화에 도달하므로 기본 단계의 코드만 실행됩니다.

실제로 재귀를 사용하지 않고 간단한 방법으로 재귀 메서드를 구현하는 것이 항상 가능한 것은 아닙니다. 그러나 모든 재귀적 방법은 특정 데이터 구조(스택)를 사용하여 재귀를 시뮬레이션하여 반복적으로 구현할 수 있습니다.

=== Example:문자열에서 문자 발생 횟수

문자열 _s 에서 문자 c_ 의 발생 횟수를 계산하는 작업의 재귀적 특성화 :

* __s__가 빈 문자열”“이면 0을 반환합니다.
* __그렇지 않고 s__의 첫 번째 문자가c와 같으면 첫 번째 문자 없이 _s_ 와 동일한 문자열 c에서의 발생 횟수에 1을 더한 값을 반환합니다 .
* __그렇지 않은 경우(즉, s__의 첫 번째 문자가c와 다른 경우) 첫 번째 문자 없이 _s_ 와 동일한 문자열에서 c가 나타나는 횟수를 반환합니다 .

[source,java]
----
Implementation:
----

[source,java]
----
public static int countChars(String s, char c) {
  if (s.length() == 0)
    return 0;
  else if (s.charAt(0) == c)
    return 1 + countChars(s.substring(1), c);
  else
    return countChars(s.substring(1), c);
}
----

=== Example: 파일에서 읽은 최대 양의 정수

양의 정수가 포함된 파일에서 읽은 값 집합 중에서 최대값을 찾는 작업의 재귀적 특성화:

* 파일이 완료되면 0을 반환합니다.
* 그렇지 않으면,
[arabic]
. 파일에서 정수 _i를 읽습니다._
. 파일의 나머지 값 중에서 최대값 _m을 찾습니다._
. __i__와__m__사이에서 더 큰 것을 반환합니다 .

구현: BufferedReader를 통해 파일에 액세스 하고 각 정수가 별도의 줄에 기록된다고 가정합니다.

[source,java]
----
public static int maximum(BufferedReader br) throws IOException {
  String s = br.readLine();
  if (s == null)
    return 0;
  else {
    int i = Integer.parseInt(s);
    int m = maximum(br);
    return (m > i)? m : i;
  }
}
----

=== 읽기용 루프와 재귀적 읽기 비교

Reading loop 구조:

[source,java]
----
read the first element
while(element is valid) {  
process the element; 
read the following element;
}
----

재귀적 reading:

[source,java]
----
read an element
if (element is valid) {  
process the element;  
call the reading method recursively;
}
----

_Example:_ 파일( BufferedReader 를 통해 액세스됨 )을 출력 스트림에 복사합니다.

반복적 구현:

[source,java]
----
public static void copyIterative(BufferedReader br, PrintStream p) throws IOException {
  String s = br.readLine();
  while (s != null) {
    p.println(s);
    s = br.readLine();
  }
}
----

재귀적 구현:

[source,java]
----
public static void copy(BufferedReader br, PrintStream p) throws IOException {
  String s = br.readLine();
  if (s != null) {
    p.println(s);
    copy(br, p);
  }
  // else don't do anything
}
----

=== Example: 마지막 항목이 첫 번째 항목이 됩니다.

우리는 ( BufferedReader 를 통해 액세스하는) 파일의 라인을 읽고 이를 출력 스트림에 복사하여 파일 라인의 순서를 뒤집기를 원합니다.

재귀를 사용하면 이 작업이 간단해집니다.

[source,java]
----
public static void copyInverse(BufferedReader br, PrintStream p) 
throws IOException {
  String s = br.readLine();
  if (s != null) {
    copyInverse(br, p);
    p.println(s);
  }
}
----

copyInverse 메소드는 반복적인 방식으로 쉽게 구현할 수 없습니다. 그 이유는 행을 역순으로 인쇄하려면 인쇄를 시작하기 전에 읽은 모든 행을 적절한 데이터 구조로 읽고 저장해야 하기 때문입니다. 나중에 이 예제를 살펴보고 재귀 활성화의 지역 변수와 관련된 메모리 위치가 파일에서 읽은 행의 임시 메모리 위치로 작동하는 방법을 보여 드리겠습니다.

이러한 유형의 재귀와 이전에 본 간단한 경우(예: 복사 메서드의 경우) 를 쉽게 반복 구현을 얻을 수 있다는 점에 유의하세요 . 간단한 경우는 메서드가 종료되기 전에 실행된 마지막 문이 재귀 호출( _tail recursion_ )인 경우입니다. 일부 컴파일러는 꼬리 재귀의 경우를 감지하고 재귀를 반복으로 대체하여 보다 효율적인 기계어 코드를 얻을 수 있습니다.

대신 일반적으로 재귀 구현은 재귀 호출을 처리해야 하기 때문에 해당 반복 구현보다 효율성이 떨어집니다(나중에 참조).

=== *재귀를 사용하여 요소 계산*

파일에서 읽은 요소의 개수를 계산하고 싶습니다. 이를 수행하는 재귀적 방법의 구조는 다음과 같습니다.

[source,java]
----
read an element;
if (element is not valid)  
    return 0;
else  
    return 1 + result-of-the-recursive-call;
----

example__:__ 파일의 줄 수 계산

[source,java]
----
public static int countLines(BufferedReader br) throws IOException {
  String s = br.readLine();
  if (s == null)
    return 0;
  else
    return 1 + countLines(br);
}
----

=== 재귀를 사용한 조건부 요소 계산

우리는 주어진 조건을 만족하는 파일 요소들만 계산하고 싶습니다. 이를 수행하는 재귀적 방법의 구조는 다음과 같습니다.

[source,java]
----
read an element;
if (element is not valid)  
    return 0;
else if (condition)  
    return 1 + result-of-the-recursive-call;
else  
    return result-of-the-recursive-call;
----

_Example:_ Counting the number of lines of a file that start with `:'

[source,java]
----
public static int countLinesColon(BufferedReader br) throws IOException {
  String s = br.readLine();
  if (s == null)
    return 0;
  else if (s.charAt(0) == ':')
    return 1 + countLinesColon(br);
  else
    return countLinesColon(br);
}
----

=== 런타임 메모리 관리

실행 시 JVM(Java Virtual Machine)은 메모리의 다양한 부분을 처리해야 합니다.

* *Java 바이트코드가*
+
포함된 부분 (예: JVM에서 실행되는 코드) -
** 클래스가 JVM에 로드될 때 실행 시간에 결정됩니다.
** 컴파일 타임에 각 메소드에 대한 차원이 고정됩니다.
* {blank}
+
*heap*::
객체를 포함하는 메모리의 일부 -
** 실행 중에 동적으로 증가하고 축소됩니다.
** 각 객체는 다른 객체와 독립적으로 할당 및 할당 해제됩니다.
* {blank}
+
*활성화 레코드 스택*::
메소드에 로컬인 데이터를 위한 메모리의 일부(변수 및 매개변수) -
** 실행 중에 동적으로 증가하고 축소됩니다.
** 스택 형태로 관리됩니다(Last-In-First-Out 전략).
+
## 힙 관리 및 가비지 수집
** 객체는 new
+
연산자 를 통해 생성자를 호출하여 생성됩니다 . 객체가 생성되는 순간 객체의 메모리 위치가 힙에 할당됩니다.
+
가비지 _컬렉터는_ 객체에 액세스하는 데 사용할 수 있는 참조가 더 이상 없어 더 이상 사용할 수 없고 할당이 취소될 수 있는 경우를 감지할 수 있는 JVM의 구성 요소입니다. 일반적으로 가비지 수집기는 메모리를 사용 가능하게 해야 할 때 프로그래머의 제어 없이 JVM에 의해 자동으로 호출됩니다. 그러나 프로그래머는 System 클래스의 정적 메서드 gc를 호출하여 가비지 수집기를 명시적으로 호출하도록 선택할 수도 있습니다 .
+
## 활성화 기록의 스택
+
스택 _은_ LIFO 액세스 전략을 사용하는 선형 데이터 구조입니다.
LIFO는 Last-In-First-Out을 의미합니다.
즉, 스택에 들어간 마지막 요소가 존재하는 요소 중에서 스택을 떠나는 첫 번째 요소라는 의미입니다.
접시).
+
런타임 시 JVM은 *활성화 레코드* (AR) 스택을 관리합니다.
** __각 메소드 활성화__에 대해 새로운 AR이 스택 상단에 생성됩니다.
** 메서드 활성화가 끝나면 AR이 스택에서 제거됩니다.
+
각 AR에는 다음이 포함됩니다.
** 호출 객체에 대한 참조를 포함한 형식 매개변수의 메모리 위치(메소드가 정적 메소드가 아닌 경우)
** 지역 변수의 메모리 위치(존재하는 경우)
** 메소드 호출에 대한 반환 값(메서드의 반환 유형이void와 다른 경우 )
** 반환 주소의 메모리 위치, 즉 호출 메서드에서 실행할 다음 문의 주소입니다.
** 프로그램에서 개체를 더 이상 사용하지 않으면 해당 개체에 대해 힙에 할당된 메모리 위치가 해제되어 다른 개체에 사용할 수 있게 됩니다. Java에서는 다른 언어와 달리 프로그래머가 그러한 작업을 명시적으로 수행하도록 선택할 수 없습니다. 개체에 더 이상 액세스할 수 없으면 가비지 수집기가 자동으로 수행합니다.
+
## 활성화 레코드 스택의 진화 예
+
다음 메소드 main , A 및 B 를 고려하고 기본 메소드 실행 중에 어떤 일이 발생하는지 살펴보겠습니다 .
+
[source,java]
----
public static int B(int pb) {
  /* b0 */ System.out.println("In B. Parameter pb = " + pb);
  /* b1 */ return pb+1;
}

public static int A(int pa) {
  /* a0 */ System.out.println("In A. Parameter pa = " + pa);
  /* a1 */ System.out.println("Call of B(" + (pa * 2) + ").");
  /* a2 */ int va = B(pa * 2);
  /* a3 */ System.out.println("Again in A. va = " + va);
  /* a4 */ return va + pa;
}

public static void main(String[] args) {
  /* m0 */ System.out.println("In main.");
  /* m1 */ int vm = 22;
  /* m2 */ System.out.println("Call of A(" + vm + ").");
  /* m3 */ vm = A(vm);
  /* m4 */ System.out.println("Again in main. vm = " + vm);
  /* m5 */ return;
}
----
+
단순화를 위해 println 메소드 의 호출을 무시 하고 이를 간단한 명령문인 것처럼 간주합니다. 또한 Java 소스 코드의 각 명령문은 Java 바이트코드의 단일 명령문에 해당한다고 가정합니다. 또한 바이트코드가 JVM에 의해 다음 메모리 위치에 로드된다고 가정합니다.
+
image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img5.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img5.png]
+
프로그램에 의해 생성된 출력:
+
....
In main.
Call of A(22).
In A. Parameter pa = 22
Call of B(44).
In B. Parameter pb = 44
Again in A. va = 45
Again in main. vm = 67
....
+
AR 스택의 진화:
+
image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img6.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img6.png]
+
코드 실행 중에 어떤 일이 발생하는지 이해하려면 AR 스택 외에도 실행할 다음 Java 바이트코드 문의 주소인 *프로그램 카운터 (PC)를 참조해야 합니다.*
+
메인 메소드에서 A(vm)이 활성화되면 어떤 일이 일어나는지 자세히 분석합니다 . 활성화 전 AR 스택은 위 그림의 1과 같습니다.
[arabic]
. _실제 매개변수가 평가됩니다_. 이 경우 실제 매개변수는 값이 정수 22인 vm 표현식입니다.
. _실행할 메소드는_ 실제 매개변수의 수와 유형에 따라 호출에 해당하는 시그니처를 갖는 메소드의 정의를 찾아 결정됩니다(메소드 이름은 동일해야 하며 실제 매개변수는 숫자와 일치해야 함).
형식 매개변수에 대한 유형):
우리의 경우 실행할 메소드에는 A(int) 시그니처가 있어야 합니다 .
. _호출 메서드의 실행이 일시 중단됩니다_.
이 경우에는 이것이 기본 메서드입니다.
** _호출된 메서드의 현재 활성화를 위해 AR이 생성됩니다_.
이 경우 A의 현재 활성화를 위한 AR이 생성됩니다. AR에는 다음이 포함됩니다.
*** 형식 매개변수의 메모리 위치: 우리의 경우 int 유형의 매개변수 pa;
*** 지역 변수의 메모리 위치: 우리의 경우 int 유형의 매개변수 va;
*** 반환 값의 메모리 위치: 우리의 경우 RV로 표시됩니다.
*** 반환 주소에 대한 메모리 위치: 우리의 경우에는 RA로 표시됩니다.
[arabic]
. _실제 매개변수의 값은 해당 형식 매개변수에 할당됩니다_.
이 경우 형식 매개변수 pa는 값 22로 초기화됩니다.
. _AR의 반환 주소는 현재 호출이 끝날 때 실행되어야 하는 호출 메서드의 다음 문의 주소로 설정됩니다.
이_
+
경우 A 활성화를 위한 AR의 반환 주소는 다음으로 설정됩니다. 값 104는 A 의 활성화가 완료될 때 실행될 main 의 명령문 m4 의 주소입니다.이 시점의 AR은 위 그림의 2와 같습니다.
. _호출된 메서드의 첫 번째 문의 주소는 프로그램 카운터에 할당됩니다 .
우리의 경우_ A의 첫 번째 문의 주소인 주소 200이 프로그램 카운터에 할당됩니다.
. _프로그램 카운터에 표시된 다음 명령문이 실행됩니다(이것은 호출된 메소드의 첫 번째 명령문입니다)_. 우리의 경우 주소 200에 있는 명령문, 즉 A의 첫 번째 명령문입니다 .
+
이러한 단계 후에 호출된 메서드의 명령문( A 의 경우)이 순서대로 실행됩니다. 특히, 메서드 자체에 메서드 호출이 포함되어 있으면 해당 메서드가 활성화되고 실행되며 종료됩니다. 우리의 경우, 메소드 B 는 메소드 A 와 유사한 메커니즘을 사용하여 활성화 및 실행되고 종료됩니다 . AR 스택은 위의 3과 4에서 볼 수 있듯이 진화합니다.
+
이제 A 의 활성화가 종료될 때 *,* 즉 명령문이 va+pa를 반환할 때 어떤 일이 발생하는지 자세히 분석해 보겠습니다. 실행됩니다. 이 문장이 실행되기 전 AR의 스택은 위 그림의 4와 같다.
(정확히 말하면 그림에서 RV로 표시된 반환 값을 위해 예약된 메모리 위치는 return 문이 실행되는 순간 초기화 된다 .
, 이전에는 아님).
[arabic]
. _현재 AR의 반환 주소를 위해 예약된 메모리 위치에 저장된 값은 프로그램 카운터에 할당됩니다_. 우리의 경우 이러한 값은 104와 동일하며 이는 AR에 저장된 다음 명령문의 주소와 정확히 같습니다. 실행되어야 할 메인 .
. _호출된 메서드가 값을 반환해야 하는 경우 해당 값은 현재 AR의 특정 메모리 위치에 저장됩니다_.
이 경우
+
va+pa 표현식의 평가 결과인 값 67은 다음 위치에 저장됩니다.
반환 값을 포함하는 데 적합한 RV로 표시된 메모리 위치입니다.
. _현재 활성화에 대한 AR은 AR 스택에서 제거되고 현재 AR은 스택에서 바로 아래 AR이 됩니다. AR 스택에서 AR을 제거하는 것과 함께 반환 값(있는 경우)은 호출 메서드의 AR 메모리 위치에 복사됩니다.
이 경우_ A 활성화를 위한 AR이 스택에서 제거됩니다.
, 현재 AR은 main 활성화를 위한 AR이 됩니다 . 더욱이, 메모리 위치 RV에 저장된 값 67은 main 의 AR에 있는 변수 vm 에 할당됩니다 . AR의 스택은 위 그림의 5와 같습니다.
. _프로그램 카운터에 표시된 다음 명령문이 실행됩니다(즉, 1단계에서 지정된 명령문)_. 이 경우 주소 104의 명령문이 실행되며 이는 main 실행을 계속하는 것에 해당합니다 .
+
## 재귀적 방법의 경우 AR 스택의 진화
+
재귀적 방법의 경우 AR 스택과 프로그램 카운터가 진화하는 방식은 비재귀적 방법과 정확히 동일합니다. 그러나 AR은 메소드가 아닌 _메소드 활성화 와 연관되어 있다는 점을 기억하는 것이 중요합니다._
+
_예: 다음 메소드_ 재귀 와 기본 메소드 에서의 활성화를 고려해 보겠습니다 .
+
[source,java]
----
public static void recursive(int i) {
  System.out.print("In recursive(" + i + ")");
  if (i == 0)
    System.out.println(" - Finished");
  else {
    System.out.println(" - Activation of recursive("
                       + (i-1) + ")");
    recursive(i-1);
    System.out.print("Again in recursive(" + i + ")");
    System.out.println(" - Finished");
  }
  return;
}

public static void main(String[] args) {
  int j;

  System.out.print("In main");
  j = Integer.parseInt(JOptionPane.showInputDialog(
                         "Insert a non-negative integer"));
  System.out.println(" - Activation of recursive(" + j + ")");
  recursive(j);
  System.out.print("Again in main");
  System.out.println(" - Finished");

  System.exit(0);
}
----
+
Output generated by the program when the user inputs the value 2:
+
[source,java]
----
In main - Activation of recursive(2)
In recursive(2) - Activation of recursive(1)
In recursive(1) - Activation of recursive(0)
In recursive(0) - Finished
Again in recursive(1) - Finished
Again in recursive(2) - Finished
----
+
AR 스택의 진화는 아래와 같습니다. 258은 main에서 recursive(j)가 활성화된 다음 구문의 주소이고, 532는 recursive에서 recursive(i-1)가 활성화된 다음 구문의 주소라고 가정했습니다.
호출된 메서드는 어떤 값도 반환하지 않으므로(반환 유형은 무효), AR에는 해당 값에 대한 메모리 위치가 포함되어 있지 않습니다.
또한 스택 하단의 AR은 메인 메서드에 대한 것이고 다른 모든 AR은 재귀의 연속적인 활성화에 대한 것이므로 각 AR이 어떤 메서드를 참조하는지는 표시하지 않았습니다.
+
image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img7.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img7.png]
+
다양한 재귀 활성화의 경우, 매개변수 i의 값이 0인 마지막 재귀 활성화까지 매개변수 i의 값이 연속적으로 감소하면서 스택에 다른 AR이 생성됩니다.
후자의 경우 더 이상의 재귀 호출이 수행되지 않고 ” - 완료”라는 문자열이 인쇄되고 활성화가 종료됩니다. 이렇게 하면 이전 활성화가 ``재귀(i)에서
다시 - 완료''라는 메시지를 인쇄하고 종료됩니다.
+
또한 다양한 재귀 활성화에 연결된 Java 바이트코드는 항상 동일합니다.
즉, 재귀 메서드 중 하나라는 점에 유의하세요.
따라서 다양한 재귀 활성화에 대해 AR에 저장된 반환 주소는 주 메서드의 문 반환 주소(즉, 258)인 첫 번째 활성화를 제외하고는 항상 동일합니다(즉, 532).
+
## Example: 마지막 줄이 첫 번째 줄이 됩니다(cont’d).
+
버퍼 리더를 통해 액세스하는 파일의 줄을 읽고 출력 스트림에 복사하여 파일의 줄 순서를 뒤집는 예제를 다시 살펴 보겠습니다.
+
간단하게 하기 위해 앞서 살펴본 재귀적 구현을 여기서 반복합니다:
+
[source,java]
----
public static void copyInverse(BufferedReader br, PrintStream p) throws IOException {
  String s = br.readLine();
  if (s != null) {
    copyInverse(br, p);
    p.println(s);
  }
}
----
+
이 시점에서 파일의 연속적인 줄은 복사 역방향의 연속적인 재귀 호출의 AR에 있는 변수 s의 연속적인 발생을 통해 액세스할 수 있는 문자열에 저장된다는 것이 분명합니다.
따라서 AR 스택은 파일을 인쇄하기 전에 파일의 줄을 저장하는 임시 ’데이터 구조’로 사용됩니다.
+
이 메서드를 반복적인 방식으로 구현하려면 인쇄를 시작하기 전에 파일의 모든 줄을 읽고 저장해야 합니다.
AR 스택을 사용할 수 없으므로 문자열 배열과 같은 추가 데이터 구조가 필요합니다.
+
## *Example: palindrome string*
+
왼쪽에서 오른쪽으로 읽은 문자열이 오른쪽에서 왼쪽으로 읽은 문자열과 같으면 문자열을 팔린드롬이라고 합니다.
예를 들어 대문자와 소문자의 차이를 무시하고 ``iTopiNonAvevanoNipoti'' 문자열은 팔린드롬이지만
``iGattiNonAvevanoCugini'' 문자열은 팔린드롬이 아닙니다.
+
다음은 회문 문자열의 귀납적 특성입니다.
** 빈 문자열은 회문입니다.
** 단일 문자로만 구성된 문자열은 회문입니다.
** 문자열 _c_  _s_  __d__는 회문입니다. s 가 회문이고 c 와 동일한 문자 이면 ; ** 다른 어떤 것도 회문이 아닙니다.
+
이러한 특성화를 사용하여 매개변수로 전달된 문자열이 회문인지 여부를 확인하는 재귀적 방법을 구현할 수 있습니다.
+
[source,java]
----
public static boolean palindrome(String s) {
  if (s.length() <= 1)
    return true;
  else
    return (s.charAt(0) == s.charAt(s.length()-1)) &&
            palindrome(s.substring(1,s.length()-1));
}
----
+
*Example: symmetric sequence of integers*
+
중앙 위치의 단일 0을 제외하고 모두 양수인 정수 시퀀스 를 반전할 때 해당 시퀀스가 동일한 시퀀스와 일치하면 _대칭_ 이라고 합니다 . 예를 들어, 수열 5 8 3 0 3 8 5는 대칭인 반면, 수열 5 8 3 0 8 5 3 은 대칭이 아닙니다.
+
중앙 위치의 0을 제외하고 한 줄에 하나씩, 모두 양수인 정수 시퀀스를 포함하는 텍스트 파일(BufferedReader 를 통해 액세스 )이 있고 대칭인지 확인하려고 한다고 가정합니다. 한 가지 가능성은 전체 시퀀스를 배열에 저장하고 배열 요소에 직접 액세스하여 검사를 수행하는 것입니다. 이는 회문 문자열에 대해 수행한 것과 유사하게 루프를 사용하거나 재귀를 통해 수행할 수 있습니다. 그러나 재귀를 사용하면 추가 데이터 구조를 (명시적으로) 사용하지 않고도 검사를 수행할 수 있습니다.
+
먼저 회문 문자열에 대해 주어진 것과 유사하게 대칭인 중간에 0이 있는 정수 시퀀스의 귀납적 특성을 제공하겠습니다.
** 단일 0으로 구성된 시퀀스는 대칭입니다.
** _s_ 가 대칭이고 _n_ 과 _m_ 이 두 개의 동일한 양의 정수인 경우 시퀀스 _n_  _s  m 은 대칭입니다._
** 다른 어떤 것도 대칭 시퀀스가 아닙니다.
+
이러한 특성화를 사용하여 파일에 대칭인 중간에 0이 있는 일련의 양의 정수가 포함되어 있는지 확인하는 재귀적 구현을 제공할 수 있습니다(파일 끝에 추가 줄이 포함되어 있으면 무시됩니다).
+
[source,java]
----
public static boolean symmetric(BufferedReader br) throws IOException {
  int n = Integer.parseInt(br.readLine());    // read the first integer
  if (n == 0)
    return true;         // we are in the middle of the sequence
  else {
    // read the sequence in the middle and check whether it is symmetric
    boolean sim = symmetric(br);
    int m = Integer.parseInt(br.readLine());  // read the last integer
    return (n == m) && sim;
  }
}
----
+
## *Example: Towers of Hanoi*
+
하노이 탑의 문제는 베트남의 고대 전설에서 비롯되었습니다.
그에 따르면 승려 그룹이 특정 규칙에 따라 다양한 크기의 64개 원반으로 구성된 탑 주위를 이동합니다. 전설에 따르면 승려들이 원반 주위를 다 돌고 나면 세상의 종말이 올 것이라고 합니다. 디스크를 이동해야 하는 규칙은 다음과 같습니다.
** 처음에는 디스크가 지지대 1에 감소하는 크기로 배치됩니다.
** 목표는 보조 지지대 3을 사용하여 지지대 2로 이동하는 것입니다.
** 디스크 이동 조건은 다음과 같습니다.
*** 모든 디스크(이동할 디스크 제외)는 세 개의 지지대 중 하나에 있어야 합니다.
*** 한 번에 하나의 디스크만 이동할 수 있으며, 지지대 중 하나의 타워 상단에서 디스크를 가져와 다른 지지대의 타워 상단에 배치할 수 있습니다.
*** 디스크는 더 작은 디스크에 배치될 수 없습니다.
+
6개 디스크 세트의 초기 상태(a), 중간 상태(b) 및 최종 상태(c)가 다음 그림에 표시되어 있습니다.
+
(ㅏ)
+
image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img9.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img9.png]
+
(비)
+
image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img10.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img10.png]
+
(씨)
+
image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img11.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img11.png]
+
우리는 수행해야 할 동작 순서를 인쇄하는 프로그램을 구현하고 싶습니다. 각 이동에 대해 다음과 같은 명령문을 인쇄하려고 합니다(여기서 _x_ 와 _y_ 는 1, 2 또는 3입니다).
+
_x 지지대에서 y_ 지지대로 디스크 이동
+
_아이디어: 3개를 보조 지지대로 사용하여 n_ > 1개의 디스크를 지지대 1에서 지지대 2로 이동하려면 :
[arabic]
. _n_- 1개의 디스크를 1에서 3으로 이동합니다 (n번째 디스크를 이동하지 않고).
. l’ __n__번째 디스크를 1에서 2로 옮깁니다.
. _n_- 1개의 디스크를 3에서 2로 이동합니다 (n번째 디스크를 이동하지 않고).
+
구현(이는 다중 재귀의 또 다른 예입니다):
+
[source,java]
----
import javax.swing.JOptionPane;

public class Hanoi {

  private static void moveADisk(int source, int dest) {
    System.out.println("move a disk from " + source + " to " + dest);
  }

  private static void move(int n, int source, int dest, int aux) {
    if (n == 1)
      moveADisk(source, dest);
    else {
      move(n-1, source, aux, dest);
      moveADisk(source, dest);
      move(n-1, aux, dest, source);
    }
  }

  public static void main (String[] args) {
    int n = Integer.parseInt(
      JOptionPane.showInputDialog("How many disks do you want to move?"));
    System.out.println("To move " + n +
                       " disks from 1 to 2 using 3 as auxiliary disk:");
    move(n, 1, 2, 3);
    System.exit(0);
  }
----
+
## 다중 재귀의 경우 활성화 횟수
+
다중 재귀를 사용할 때 재귀 호출의 깊이(예: AR 스택의 최대 높이)에 따라 재귀 활성화 수가 기하급수적으로 증가할 수 있다는 점을 고려해야 합니다.
+
다중 재귀를 사용할 때 재귀 호출의 깊이(예: AR 스택의 최대 높이)에 따라 재귀 활성화 수가 기하급수적으로 증가할 수 있다는 점을 고려해야 합니다.
+
_예:_ 하노이 타워
+
_act_(_n_)
+
= number of activations of moveADisk for _n_ disks
+
=number of moves of a disk
+
_act_(_n_) =
+
image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img12.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img12.png]
+
_n_ > 1 인 경우 ``1 +’’를 무시하더라도 _act_ ( _n_ ) = 2 n-1 이 됩니다 . _따라서 act_ ( _n_ ) > 2 n-1 이 됩니다 .
+
하노이 타워 문제의 경우 활성화(즉, 이동)의 기하급수적인 수는 문제의 본질적인 특성이므로 더 나은 해결책은 없습니다.
+
## *Example: traversal of a moor 황무지 횡단*
+
(주어진 R과 C에 대해) R x C 정사각형 구역으로 구성된 황무지를 생각해 보세요.
각 구역은 육지 구역(교차 가능) 또는 수역 구역(교차 불가)입니다.
황무지의 각 구역은 한 쌍의 좌표 < r, c >로 식별되며, 0 < = r < R, 0 < = c < C. r은 구역 < r, c >의 행을, c는 열을 나타냅니다.
횡단은 황무지를 가로지르는 경로, 즉 황무지를 왼쪽(열 0)에서 오른쪽(열 C-1)으로 가로지르는 인접한 육지 구역의 시퀀스입니다.
우리는 각 단계에서 오른쪽으로 이동하는, 즉 열 C의 영역에서 열 C + 1의 영역으로 이동하는 횡단에 관심이 있습니다. 즉, 다음 그림과 같이 < r, c > 위치의 영역은 < r - 1, c + 1 >, < r, c + 1 > 및 < r + 1, c + 1 > 위치의 영역에 인접한 것으로 간주됩니다.
+
image::https://github.com/NHN-academy-Avocado/Avocado/assets/66411937/e32c3cee-f3f4-4321-b0b0-4927cd743e1c[Untitled]
+
다음 그림에서 ’*’ 문자는 육지 구역을 나타내고, `o' 문자는 수역 구역을 나타냅니다. 무어 1은 횡단이 없는 반면, 무어 2는 횡단이 있습니다(그림 참조).
+
image::https://github.com/NHN-academy-Avocado/Avocado/assets/66411937/e7d99c86-a0d3-4007-8679-1f4dfde4f4ea[Untitled]
+
적어도 하나의 트래버스가 있는지 확인하고, 존재하는 경우 인쇄하려고 합니다(트래버스가 두 개 이상 있는 경우, 찾은 첫 번째 트래버스를 인쇄하면 충분합니다).
+
## *Moor: representation of a moor 무어 표현*
+
무어를 표현하기 위해 다음 기능을 내보내는 Moor 클래스를 구현합니다 .
** 행 수, 열 수 및 일반 구역이 토지 구역일 확률을 나타내는 [0..1] 범위의 실제 값이 주어지면 무작위 황무지 건설; ** 행 수 반환;
** 열 수 반환; ** 좌표가 < __r,c__>인 구역이 토지인지 확인하십시오.
+
또한 클래스에서는 토지 구역에 ’*` 문자를 사용하고 수역에 ’o' 문자를 사용하여 황무지를 인쇄하는 방식으로 Object 의 toString 메소드를 재정의합니다.
+
클래스를 구현하면서 우리는 boolean 행렬을 사용하여 황무지를 표현하기로 선택했습니다 . 여기서 true 값은 육지 영역을 나타내고 false 값은 수역을 나타냅니다.
+
[source,java]
----
public class Moor {

  private boolean[][] moor;

  public Moor(int rows, int columns, double probLand) {
    moor = new boolean[rows][columns];
    for (int r = 0; r < rows; r++)
      for (int c = 0; c < columns; c++)
        moor[r][c] = (Math.random() < probLand);
  }

  public int getNumRows() {
    return moor.length;
  }

  public int getNumColumns() {
    return moor[0].length;
  }

  public boolean land(int r, int c) {
    return (r >= 0) && (r < moor.length) &&
      (c >= 0) && (c < moor[0].length) &&
      moor[r][c];
  }

  public String toString() {
    String res = "";
    for (int r = 0; r < moor.length; r++) {
      for (int c = 0; c < moor[0].length; c++)
        res = res + (moor[r][c]? "*" : "o");
      res = res + "\n";
    }
    return res;
  }
}
----
+
## *Moor: solution of the traversal problem 트래버스 문제 해결*
+
이 문제를 풀려면 첫 번째 구역이 열 1에 있고 마지막 구역이 열 C에 있는 무어의 구역 시퀀스를 찾아야 합니다.
시퀀스의 각 위치는 다음 위치에 인접해야 합니다. 예를 들어 첫 번째 위치가 < 3, 1 >인 경우 두 번째 위치는 < 4, 2 >일 수 있지만 < 3, 3 >은 아닐 수 있습니다.
각 단계에서 오른쪽으로 이동해야 하므로 시퀀스의 단계는 정확히 C 단계가 됩니다.
+
무어를 탐색하기 위해 재귀적 방법을 사용합니다.
검색 프로세스가 본질적으로 재귀적이기 때문에 이것은 가장 직관적 인 선택입니다.
알고리즘은 다음과 같이 요약할 수 있습니다.
첫 번째 단계에서는 첫 번째 열에서 육지 영역을 찾습니다.
해당 영역이 있으면 해당 영역에서 시작합니다. 일반 재귀 단계에서는 영역 < r, c >에 있습니다.
영역이 육지 영역인 경우 인접한 위치, 즉 < r - 1, c + 1 >, < r, c + 1 > 및 < r + 1, c + 1 >에서 재귀적으로 검색을 계속할 수 있습니다.
대신 해당 영역이 물 영역인 경우 계속 진행할 수 없으며 해당 영역에서의 검색이 종료됩니다.
마지막 열의 영역에 도착하고(즉, c가 C - 1과 같고) 해당 영역이 육지일 경우 전체 검색은 성공적으로 종료됩니다.
+
일반적인 검색 단계는 다음과 같은 재귀 메서드 searchPath를 통해 구현할 수 있는데, 이 메서드는 무어와 무어를 통과하는 경로를 검색하기 시작할 영역의 좌표 < r, c >를 매개변수로 받습니다.
+
[source,java]
----
private static boolean searchPath(Moor m, int r, int c){
if (*the coordinates <r,c> of m are not valid*||*in m <r,c> is a water zone*)
    return false;
else if (*<r,c> is on the right border of* m)
    return true;
else
    return searchPath(p, r-1, c+1) || 
                    searchPath(p, r  , c+1) ||
                    searchPath(p, r+1, c+1);
}
----
+
## *Moor: construction of the traversal 횡단 구성*
+
트래버스의 존재를 확인하는 것 외에도 그러한 트래버스를 반환하고 싶습니다.
따라서 다음 함수를 내보내는 Traversal 클래스를 구현합니다:
** 황무지가 주어지면 횡단 건설; 황무지에 최소한 하나의 횡단이 있는 경우 구성된 횡단은 다음 중 하나여야 합니다.
** 횡단과 관련된 황무지의 귀환; ** 순회 존재 여부를 확인합니다.
** 존재하는 경우 순회 길이를 반환합니다.
** 순회 의 __i__번째 단계 의 반환 . 여기서 i는 순회가 존재하는 경우 순회 길이에서 1을 뺀 값 사이의 정수입니다.
** Object 의 toString 메서드 를 재정의하여 실현된 순회를 나타내는 문자열 반환입니다 .
+
_순회를 나타내기 위해 우리는 그 길이가 C_ 와 같아야 한다는 사실 , 즉 황무지의 기둥 수와 동일해야 하고 순회에 속하는 영역이 0부터 _C 까지 연속적인 열에 있다는 사실을 활용합니다. - 1. 따라서 인덱스 c_ 의 일반 요소 값이 순회에 속하는 영역 < _r_ , _c > 행의 인덱스 r_ 과 동일한 _C_ 정수 요소 배열을 사용할 수 있습니다 . 예를 들어, 위의 무어 2에 표시된 순회는 배열 1,2,3,3,3,2 로 표시됩니다 . `{}`
+
다음 구현에서는 경로를 나타내는 정수 배열 유형의 추가 매개변수를 searchPath 및 traverseMoor 메소드 에 추가하고 메소드가 적절한 방식으로 경로를 업데이트하여 부작용을 수행하도록 선택했습니다. toString 메소드의 구현은 연습으로 남겨둡니다.
+
[source,java]
----
public class Traversal {

  private int[] traversal;
  private Moor moor;
  private boolean found;

  public Traversal(Moor m) {
    moor = m;
    traversal = new int[moor.getNumColumns()];
    found = traverseMoor(moor, traversal);
  }

  public Moor moor() {
    return moor;
  }

  public boolean existsTraversal() {
    return found;
  }

  public int length() {
    if (found)
      return traversal.length;
    else
      throw new RuntimeException("Traversal: traversal does not exist");
  }

  public int step(int i) {
    if (found)
      return traversal[i];
    else
      throw new RuntimeException("Traversal: traversal does not exist");
  }

  public String toString() { ... }

  // auxiliary methods

  private static boolean traverseMoor(Moor m, int[] path) {
    for (int row = 0; row < m.getNumRows(); row++)
      if (searchTraversal(m, row, 0, path)) return true;
    return false;
  }

  private static boolean searchTraversal(Moor m, int r, int c, int[] path) {
    if (!m.land(r,c))
      return false;
    else {
      path[c] = r;
      if (c == m.getNumColumns()-1)
        return true;
      else
        return searchTraversal(m, r-1, c+1, path) ||
               searchTraversal(m, r,   c+1, path) ||
               searchTraversal(m, r+1, c+1, path);
    }
  }
}
----
+
## *Exercises*
+
*연습 10.1* _n_ 번째 피보나치 수를 계산하는 메서드의 반복 구현을 제공하세요 .
+
*연습 10.2 정수* _n 에 대해 호출될 때 n_ 번째 피보나치 수 외에 계산에 사용된 피보나치 의 총 재귀 활성화 횟수도 계산하는 방식으로 fibonacci 메서드 의 재귀 구현을 수정합니다 .
+
*연습 10.3* 다음과 같이 정의되는 Ackermann 함수 _A_ ( _m_ , _n_ ) 를 계산하는 메서드의 구현을 제공합니다 .
+
_A_ ( _m_ , _n_ ) =
+
image::https://github.com/NHN-academy-Avocado/Avocado/assets/66411937/6576f3b2-b556-4d7b-9417-de411f5dface[Untitled]
+
Ackermann 함수는 _매우_ 빠르게 증가합니다(비기본 함수입니다). _A_ ( _x_ , _x_ ) 는 어떤 지수 타워 2 ^2 … 2 x 보다 빠르게 증가합니다 .
+
*연습 10.4* 다음 귀납적 정의를 기반으로 하는 재귀적 방법을 구현하십시오.
** 최대 공약수:_gcd_(x,y) =
+
image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img16.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img16.png]
** 두 개의 양의 정수가 상대적 소수인지 확인하십시오._소수_(x,y) =
+
image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img17.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img17.png]
** 정수와 양의 정수 사이의 나머지 부분:_나머지_(x,y) =
+
image::https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img18.png[https://www.inf.unibz.it/~calvanese/teaching/04-05-ip/lecture-notes/uni10/img18.png]
+
*연습 10.5* 파일에서 읽은 정수 시퀀스에서 1이 몇 번 나타나는지 계산하는 재귀 메서드 구현을 제공합니다( BufferedReader 를 통해 액세스 ) .
+
*연습 10.6 문자열* _s_ 와 문자 _c를 매개변수로 취하고 s_ 에서 문자 _c가_ 연속으로 나타나는 가장 긴 시퀀스의 길이를 반환하는 재귀 메서드의 구현을 제공하세요 .
+
*연습 10.7 다음을* 사용하여 반환된 문자열이 황야 전체를 나타내는 방식으로 Traversal 클래스의 toString 메서드 구현을 제공합니다 . -
** 수역을 나타내는 문자’o’ ,
** 횡단에 속하는 육지 구역의 경우 문자’#’
** 나머지 육지 구역에는 문자’*’가 표시됩니다.
+
*연습 10.8* 위에 표시된 황무지를 통과하는 탐색을 수행할 때 특정 육지 구역을 여러 번 방문할 수 있습니다. 이로 인해 횡단 검색이 비효율적이게 되며, 최악의 경우 황무지의 기둥 수가 기하급수적으로 늘어나게 됩니다. 위에서 구현된 searchTraversal 메소드 가 황무지의 열 수에 따라 기하급수적으로 활성화되는 횡단이 있는 황무지와 횡단이 없는 황무지의 예를 제공하십시오 . Traversal 클래스 와 searchTraversal 메소드 구현을 수정합니다.이미 방문한 황무지 지역을 표시하여 여러 번 방문하지 않도록 하는 방식입니다. 새로운 구현을 통해 searchTraversal 활성화 횟수가 황무지 구역 수에 비례하는지(지수적이지 않고) 확인합니다.
+
*연습 10.9* 모든 방향으로 이동할 수 있는 경우(육지 영역에 머무르는 한) 황무지를 통과하는 횡단을 반환하는 방식으로 Traversal 클래스를 수정 합니다 . 이 경우 횡단 표현은 황무지의 기둥 수보다 길어서 동일한 기둥의 다른 구역을 횡단할 수 있으므로 횡단 표현을 수정해야 합니다. 더욱이, 이 경우 동일한 구역에 대한 무한 루프를 피하기 위해 횡단 탐색 중에 이미 방문한 육지 구역을 표시하는 것이 불가피해진다.
